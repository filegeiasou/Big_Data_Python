# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S7RjGlyDAC1V4Ws3u98MLtkb73mFUPor
"""

import numpy as np
from scipy.linalg import svd

#This function calculates the Eigenvectors corresponding for U and V matrices
def calcMat(M, opc):
    #Case of V Matrix
    if opc == 1:
        newM = np.dot(M.T, M)
    #Case of U Matrix
    if opc == 2:
        newM = np.dot(M, M.T)
    
    eigenvalues, eigenvectors = np.linalg.eig(newM)
    ncols = np.argsort(eigenvalues)[::-1]

    #Case of V Matrix, let's transpose it
    if opc == 1:
        return eigenvectors[:,ncols].T
    #Case of U, return normally
    else: return eigenvectors[:,ncols]
        

#Function that calculates Eigenvalues corresponding to the Sigma Matrix
def calcD(M):
    if (np.size(np.dot(M, M.T)) > np.size(np.dot(M.T, M))):
        newM = np.dot(M.T, M)
    else:
        newM = np.dot(M, M.T)
    
    eigenvalues, eigenvectors = np.linalg.eig(newM)
    eigenvalues = np.sqrt(eigenvalues)
    #Sorting in descending order as the svd function does
    return eigenvalues[::-1]

#Creating our matrix
A = np.array([[4, 2, 0], [1, 5, 6]])

#Calling the corresponding Fuctions and saving the values in variables
Vt = calcMat(A, 1)
U = calcMat(A,2)
Sigma = calcD(A)

print(Vt,"\n")
print(U, "\n")
print(Sigma)

U_svd, D, VT = np.linalg.svd(A)
print(VT, "\n")
print(U_svd, "\n")
print(D)



"""Image Compression"""

from matplotlib.image import imread
import matplotlib.pyplot as plt
import numpy as np
import os

!pwd

#Reading our image and setting the size and color
plt.rcParams['figure.figsize'] = [16, 8]

#The file MUST be in the same folder
A = imread('Pao-logo.jpg')
X = np.mean(A, -1)
img = plt.imshow(X)
img.set_cmap('gray')
plt.axis('off')
plt.show()

#Computing regular SVD
U, S, VT = np.linalg.svd(X, full_matrices = False)

#Extract Diagonal Singular Values from the Sigma Matrix
S = np.diag(S)

i = 0
for k in (5, 20, 100):
    #Constructing the approximate images in the setted ranks
    X_Ap = U[:,:k] @ S[0:k,:k] @ VT[:k,:]
    plt.figure(i+1)
    i += 1
    img = plt.imshow(X_Ap)
    img.set_cmap('gray')
    plt.axis('off')
    plt.title('k = ' + str(k))
    plt.show()

